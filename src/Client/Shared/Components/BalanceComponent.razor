@if ((AuthenticationState as SteamAuthenticationStateProvider)?.UserInfo?.IsAuthenticated ?? false)
{
    @if (BalanceService.Balance == null)
    {
        <a href="javascript:void(0)" data-toggle="tooltip" data-placement="bottom" title="@BalanceService.BalanceMessage">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </a>
    }
    else
    {
        <b>Balance: </b>
        <a class="font-weight-bold" href="javascript:void(0)" @onclick="BalanceService.UpdateBalanceAsync">
            @BalanceService.Balance
        </a>
    }
}

@code {
    [Inject]
    private BalanceService BalanceService { get; set; }
    [Inject]
    private AuthenticationStateProvider AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BalanceService.OnChange += StateHasChanged;
        if ((AuthenticationState as SteamAuthenticationStateProvider)?.UserInfo?.IsAuthenticated ?? false)
            await BalanceService.UpdateBalanceAsync();
    }

    public void Dispose()
    {
        BalanceService.OnChange -= StateHasChanged;
    }
}
