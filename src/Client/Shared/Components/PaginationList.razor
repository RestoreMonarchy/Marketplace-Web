@typeparam TData

@if (PagedData != null && PagedData.Count > 0)
{
    @ChildContent

    <nav class="mt-2">
        <ul class="pagination justify-content-end">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <a class="page-link" @onclick="() => ChangePage(currentPage - 1)" href="javascript:void(0)" tabindex="-1">Previous</a>
            </li>
            @if (currentPage > 1)
            {
                <li class="page-item"><a class="page-link" @onclick="() => ChangePage(currentPage - 1)" href="javascript:void(0)">@(currentPage - 1)</a></li>
            }
            <li class="page-item active"><a class="page-link" href="javascript:void(0)">@currentPage</a></li>
            @if (currentPage < allPages)
            {
                <li class="page-item"><a class="page-link" @onclick="() => ChangePage(currentPage + 1)" href="javascript:void(0)">@(currentPage + 1)</a></li>
            }
            <li class="page-item @(currentPage == allPages ? "disabled" : "")">
                <a class="page-link" @onclick="() => ChangePage(currentPage + 1)" href="javascript:void(0)">Next</a>
            </li>
        </ul>
    </nav>
}


@code {
    [Parameter]
    public List<TData> Data { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public int DefaultPerPage { get; set; }
    
    [Parameter]
    public List<TData> PagedData { get; set; }
    [Parameter] 
    public EventCallback<List<TData>> PagedDataChanged { get; set; }


    int currentPage = 1;
    int allPages => Data.Count / DefaultPerPage + (Data.Count % DefaultPerPage > 0 ? 1 : 0);

    protected override async Task OnInitializedAsync()
    {        
        PagedData = Data.Take(DefaultPerPage).ToList();
        await PagedDataChanged.InvokeAsync(PagedData);
    }

    public async Task ChangePage(int newCurrentPage)
    {
        currentPage = newCurrentPage;
        PagedData = Data.Skip((currentPage - 1) * DefaultPerPage).Take(DefaultPerPage).ToList();
        await PagedDataChanged.InvokeAsync(PagedData);
    }

}
